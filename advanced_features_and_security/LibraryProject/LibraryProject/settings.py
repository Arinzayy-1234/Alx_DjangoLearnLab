"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-eg-1c5es=kwstx5_=gqm_dho!8gq9wigsf(i29n&ri)5uaoa7#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', 'localhost']


# Application definition

INSTALLED_APPS = [
    'bookshelf.apps.BookshelfConfig',
    'users.apps.UsersConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'relationship_app.apps.RelationshipAppConfig',
    'django_extensions',  # Optional: for additional management commands and features
    'csp',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'csp.middleware.CSPMiddleware', # Enables Content Security Policy (CSP) headers.
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# ----------Authnetication -------------------#

AUTH_USER_MODEL = 'bookshelf.CustomUser'

MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Security Protections: XSS, Clickjacking, and Content-Type sniffing
SECURE_BROWSER_XSS_FILTER = True
X_FRAME_OPTIONS = 'DENY'
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enforce cookies to be sent over HTTPS only
CSRF_COOKIE_SECURE = True
SESSION_COOKIE_SECURE = True
# What: Ensures the session cookie (which keeps users logged in) is only sent over secure (HTTPS) connections.
# Why: Prevents session hijacking by protecting the session ID from interception on insecure networks.



# Content Security Policy (CSP) settings
# Content Security Policy (CSP) settings - NEW FORMAT for django-csp 4.0+
# Why: CSP is a powerful defense against XSS by whitelisting allowed content sources.
# It tells the browser exactly where scripts, images, styles, etc., are allowed to load from,
# blocking anything else.
CONTENT_SECURITY_POLICY = {
    'DIRECTIVES': {
        'base-uri': ("'self'",), # Allows base URLs only from current origin
        'connect-src': ("'self'",), # Restricts AJAX, WebSockets etc. connections to same origin
        'default-src': ("'self'",), # Fallback for all content types
        'font-src': ("'self'",), # Restricts font loading to same origin
        'form-action': ("'self'",), # Forms can only submit to same origin
        'frame-ancestors': ("'self'",), # Additional Clickjacking protection (page can only be framed by self)
        'img-src': ("'self'",), # Restricts images to same origin (covers user profile photos served locally)
        'object-src': ("'none'",), # Disallows <object>, <embed>, <applet> for security
        'script-src': ("'self'",), # Critical for XSS: only scripts from same origin can execute
        'style-src': ("'self'",), # Only stylesheets from same origin are allowed
    }
}

# advanced_features_and_security/LibraryProject/LibraryProject/settings.py

# ... (your existing settings like DEBUG, ALLOWED_HOSTS, etc.) ...

# --- PHASE 3, STEP 1: HTTPS & HSTS Configuration ---
# Objective: Enforce HTTPS connections for all traffic and use HSTS. 

SECURE_SSL_REDIRECT = True

SECURE_HSTS_SECONDS = 31536000

SECURE_HSTS_INCLUDE_SUBDOMAINS = True

SECURE_HSTS_PRELOAD = True